{"version":3,"sources":["util/constants.ts","components/Modal/index.tsx","util/getGameModeString.ts","components/GameOverScreen/index.tsx","components/Item/index.tsx","util/transformODotaConstants.ts","util/selectItemData.ts","components/Status/index.tsx","components/Score/index.tsx","types/ActionTypes.ts","types/ActionHelpers.ts","store/actions/appActions.ts","store/selectors/appSelector.ts","components/Header/index.tsx","util/streakBonus.ts","components/Timer/index.tsx","store/actions/progressBarActions.ts","components/Game/index.tsx","components/ModeSelect/index.tsx","App.tsx","serviceWorker.ts","store/game/generateChoice.ts","store/reducers/App.ts","store/reducers/TimerProgress.ts","store/reducers/index.ts","store/index.ts","components/SuperHeader/index.tsx","index.tsx"],"names":["TIMER_BASE_TIME_MS","ENCOURAGEMENT_TEXT","WIN_TEXT","LOSE_TEXT","ModalWrapper","styled","_templateObject","Modal","_templateObject2","getGameModeString","gameMode","GameOverWrapperKeyFrames","keyframes","GameOverScreen_templateObject","GameOverModalKeyFrames","GameOverScreen_templateObject2","GameOverWrapper","_templateObject3","GameOverModal","_templateObject4","Title","_templateObject5","Score","_templateObject6","Label","_templateObject7","GameModeLabel","_templateObject8","BoxWrapper","_templateObject9","Box","_templateObject10","RetryButton","_templateObject11","ItemsWrapper","_templateObject12","Items","_templateObject13","GameOverScreen","props","react_default","a","createElement","gameState","sample","currentItemElement","answerElement","score","highestStreak","currentCount","onClick","handleRestart","handleModeReselect","Icon","Item_templateObject","img","disabled","NameTag","Item_templateObject2","Wrapper","Item_templateObject3","Item","name","excludeIds","deprecatedIds","items","Object","keys","DotaConstantsItems","map","key","item","id","dname","components","filter","includes","itemsWithRecipe","reduce","prev","curr","concat","toConsumableArray","replace","recipeIds","sanitizedItems","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","value","removedItems","remove","str","startsWith","times","length","constant","normalizeSanitizedItems","objectSpread","defineProperty","_step2","_iterator2","_iteratorNormalCompletion2","push","allItems","itemByKey","filteredItemsWithComponents","itemsWithComponents","filteredItemsWithoutComponents","usageMap","_step3","_iterator3","_iteratorNormalCompletion3","_step4","_iterator4","_iteratorNormalCompletion4","component","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","undefined","_step5","_iterator5","c","err","return","shuffleStock","selectItem","StateKeyFrames","Status_templateObject","State","Status_templateObject2","Status","memo","useEffect","timeout","setTimeout","clearTimeout","nextHandler","AppActionTypes","TimerProgressActionTypes","ScoreKeyFrames","Score_templateObject","ScoreLabel","Score_templateObject2","Math","random","createAction","type","payload","toggleGuess","dispatch","guess","TOGGLE_GUESS","addGuess","ADD_GUESS","removeGuess","REMOVE_GUESS","nextQuiz","NEXT_QUIZ","restartGame","RESTART_GAME","selectGameMode","SELECT_GAME_MODE","clearGameMode","CLEAR_GAME_MODE","reduceTries","REDUCE_TRIES","selectCurrentIndex","state","App","currentIndex","selectItemList","itemList","selectCurrentChoices","choices","selectCurrentItem","createSelector","list","i","selectCurrentGuesses","guesses","selectCurrentGuessState","b","selectCurrentProgress","Container","Header_templateObject","Header_templateObject2","TriesKeyFrames","Header_templateObject3","TriesShakeKeyFrames","Header_templateObject4","TriesLabel","Header_templateObject5","triesLeft","css","Header_templateObject6","TriesLabelShake","Header_templateObject7","Header_templateObject8","Tries","_ref","Header","Header_Label","streak","streakBonus","totalCount","calculateStreakBonus","pow","TICK_INTERVAL","Timer_templateObject","Timer","_useState","useState","_useState2","slicedToArray","prevTries","setPrevTries","_useState3","_useState4","prevGameState","setPrevGameState","_useState5","_useState6","countdown","setCountdown","timer","setProgress","progress","SET_PROGRESS","Game_templateObject","StatusContainer","Game_templateObject2","Game","nextChoice","_this","_this2","this","_this$props","currentItem","guessesIndex","tries","_this$props$currentPr","currentProgress","current","total","components_Item","process","Game_Container","index","choice","indexOf","Score_Score","React","Component","connect","ModeSelect_templateObject","BoxInner","ModeSelect_templateObject2","ModeSelect_templateObject3","ModeSelect","ModeSelect_BoxWrapper","ModeSelect_Box","selectClassic","selectHardcoreClassic","selectTimed","AppContainer","App_templateObject","AppDescription","App_templateObject2","AppDescriptionSuper","App_templateObject3","App_templateObject4","App_Wrapper","components_ModeSelect","components_Game","Boolean","window","location","hostname","match","generateChoice","choiceLength","choiceSize","diff","difference","sampleSize","shuffle","answer","getDefaultState","_","getGameModeState","defaultState","rootReducer","combineReducers","prevState","arguments","action","produce","draft","d","TimerProgress","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","SuperHeader_templateObject","InnerWrapper","SuperHeader_templateObject2","SuperHeader_templateObject3","TitleButton","SuperHeader_templateObject4","Meter","SuperHeader_templateObject5","MeterBar","SuperHeader_templateObject6","SuperHeader","Fragment","SuperHeader_Wrapper","SuperHeader_Title","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06505c94.chunk.js","sourcesContent":["export const BASE_POINTS = 200\nexport const TIMER_BASE_TIME_MS = 7000\nexport const ENCOURAGEMENT_TEXT = ['Great!', 'Perfect!', 'Correct!']\nexport const WIN_TEXT = [\n  '100 out of 100!',\n  'All Correct!',\n  'Fine, you win.',\n  'Not bad!'\n]\nexport const LOSE_TEXT = ['Better luck next time!', 'Game Over!', 'Try again!']\n","import styled from 'styled-components'\n\nexport const ModalWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  flex-direction: column;\n  background-color: white;\n`\n\nexport const Modal = styled('div')`\n  margin: 0 auto;\n  display: flex;\n  padding: 16px;\n  flex-direction: column;\n  align-items: center;\n`\n","import { Store } from '../types/Store'\n\nexport const getGameModeString = (gameMode: Store.App['gameMode']) => {\n  switch (gameMode) {\n    case 'CLASSIC':\n      return 'Classic'\n    case 'HARDCORE_CLASSIC':\n      return 'Hardcore Classic'\n    case 'TIMED':\n      return 'Timed'\n  }\n}\n","import React from 'react'\nimport { Store } from '../../types/Store'\nimport styled, { keyframes } from 'styled-components'\nimport { sample } from 'lodash'\nimport { LOSE_TEXT, WIN_TEXT } from '../../util/constants'\nimport { ModalWrapper, Modal } from '../Modal'\nimport { getGameModeString } from '../../util/getGameModeString'\n\ntype Props = {\n  score: Store.App['score']\n  highestStreak: Store.App['highestStreak']\n  gameState: Store.App['gameState']\n  currentCount: number\n  handleRestart: () => any\n  handleModeReselect: () => any\n  children?: React.ReactNode\n  currentItemElement: JSX.Element\n  answerElement: JSX.Element[]\n  gameMode: Store.App['gameMode']\n}\n\nconst GameOverWrapperKeyFrames = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\n\nconst GameOverModalKeyFrames = keyframes`\n  from {\n    transform: scale(0.75);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n`\n\nconst GameOverWrapper = styled(ModalWrapper)`\n  transform-origin: top center;\n  animation: ${GameOverWrapperKeyFrames} 0.5s ease;\n`\n\nconst GameOverModal = styled(Modal)`\n  animation: ${GameOverModalKeyFrames} 0.5s ease;\n`\n\nconst Title = styled('h1')`\n  margin: 0 0 8px 0;\n  text-align: center;\n`\n\nconst Score = styled('h2')`\n  margin: 0;\n  font-size: 4rem;\n`\n\nconst Label = styled('p')`\n  margin: 0;\n  text-transform: uppercase;\n  color: grey;\n  font-weight: 500;\n  font-size: 0.75rem;\n`\n\nconst GameModeLabel = styled(Label)`\n  color: black;\n  margin-bottom: 8px;\n`\n\nconst BoxWrapper = styled('div')`\n  display: flex;\n  & > div {\n    margin: 16px;\n  }\n`\n\nconst Box = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst RetryButton = styled('button')`\n  border: 2px solid black;\n  font-size: 1.5rem;\n  border-radius: 4px;\n  margin: 8px;\n`\n\nconst ItemsWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  & > div {\n    margin: 4px;\n  }\n`\n\nconst Items = styled('div')`\n  display: flex;\n  margin-bottom: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n  & > div {\n    margin: 4px;\n  }\n`\n\nexport function GameOverScreen(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  return (\n    <GameOverWrapper>\n      <GameOverModal>\n        <Title>\n          {props.gameState === 'GAME_OVER'\n            ? sample(LOSE_TEXT)\n            : sample(WIN_TEXT)}\n        </Title>\n        <GameModeLabel>MODE: {getGameModeString(props.gameMode)}</GameModeLabel>\n        {props.gameState === 'GAME_OVER' && (\n          <ItemsWrapper>\n            <Items>{props.currentItemElement}</Items>\n            <Items>{props.answerElement}</Items>\n          </ItemsWrapper>\n        )}\n        <Box>\n          <Label>Your final score</Label>\n          <Score>{props.score}</Score>\n        </Box>\n        <BoxWrapper>\n          <Box>\n            <Label>Highest Streak</Label>\n            <Score>{props.highestStreak}</Score>\n          </Box>\n          <Box>\n            <Label>Completed Items</Label>\n            <Score>\n              {props.gameState === 'GAME_OVER'\n                ? props.currentCount - 1\n                : props.currentCount}\n            </Score>\n          </Box>\n        </BoxWrapper>\n\n        <RetryButton onClick={props.handleRestart}>\n          {props.gameState === 'GAME_OVER' ? 'Retry' : 'Start Over'}\n        </RetryButton>\n        <RetryButton onClick={props.handleModeReselect}>\n          Change Game Mode\n        </RetryButton>\n      </GameOverModal>\n    </GameOverWrapper>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst Icon = styled('div')<{ img: string; disabled: boolean }>`\n  width: 77px;\n  height: 59px;\n  background-image: url(${props => props.img});\n  background-position: center;\n  background-size: cover;\n  opacity: ${props => (props.disabled ? '0.5' : '1')};\n  cursor: pointer;\n  outline: none;\n`\n\nconst NameTag = styled('span')`\n  padding: 4px;\n  text-shadow: 0px 0px 2px black;\n  position: absolute;\n  bottom: 0px;\n  font-weight: bold;\n  font-size: 0.66rem;\n  color: white;\n  user-select: none;\n`\n\nconst Wrapper = styled('div')`\n  position: relative;\n  border: 2px solid black;\n  border-radius: 4px;\n`\n\ntype Props = {\n  img: string\n  name: string\n  onClick?: any\n  disabled?: boolean\n}\n\nfunction Item(props: Props): React.FunctionComponentElement<Props> {\n  function handleClick() {\n    if (!props.disabled && props.onClick) {\n      props.onClick()\n    }\n  }\n  return (\n    <Wrapper>\n      <Icon img={props.img} onClick={handleClick} disabled={!!props.disabled}>\n        <NameTag>{props.name}</NameTag>\n      </Icon>\n    </Wrapper>\n  )\n}\n\nexport default Item\n","import { includes, remove, times, constant } from 'lodash'\nimport { items as DotaConstantsItems } from 'dotaconstants'\n\nconst excludeIds = [\n  275, // trident\n  276, // combo_breaker\n  260, // refresher_shard\n  1021, // river_painter\n  1022, // river_painter2\n  1023, // river_painter3\n  1024, // river_painter4\n  1025, // river_painter5\n  1026, // river_painter6\n  1027, // river_painter7\n  1028, // mutation_tombstone\n  1029, // super_blink\n  1030, // pocket_tower\n  1032 // pocket_roshan\n]\n\nconst deprecatedIds = [\n  71, // poor_mans_shield\n  212, // ring_of_aquila\n  239, // iron_talon,\n  196 // diffusal_blade_2\n]\n\n// transform into array\n// filter useless items\n// filter deprecated ids\n// transform recipe into generic recipe\n\nconst items = Object.keys(DotaConstantsItems)\n  .map(key => {\n    const item = DotaConstantsItems[key]\n    return {\n      id: item.id,\n      key,\n      dname: item.dname,\n      img: item.img,\n      components: item.components\n    }\n  })\n  .filter(item => !includes(excludeIds, item.id))\n  .filter(item => !includes(deprecatedIds, item.id))\n\nconst itemsWithRecipe = items.reduce(\n  (prev, curr) =>\n    includes(curr.key, 'recipe_')\n      ? [...prev, curr.key.replace('recipe_', '')]\n      : prev,\n  [] as string[]\n)\n\nconst recipeIds = items.reduce(\n  (prev, curr) => (includes(curr.key, 'recipe_') ? [...prev, curr.id] : prev),\n  [] as number[]\n)\n\nconst sanitizedItems = items.filter(item => !includes(recipeIds, item.id))\n\nfor (let item of sanitizedItems) {\n  if (item.components !== null) {\n    // let occurrences = 0\n    const removedItems = remove(item.components, str =>\n      str.startsWith('recipe_')\n    )\n    item.components = [\n      ...item.components,\n      ...times(removedItems.length, constant('recipe'))\n    ]\n  }\n}\n\nconst normalizeSanitizedItems = sanitizedItems.reduce(\n  (prev, curr) => ({\n    ...prev,\n    [curr.key]: curr\n  }),\n  {} as {\n    [key: string]: {\n      id: number\n      key: string\n      dname: string\n      img: string\n      components: string[] | null\n    }\n  }\n)\n\nfor (const key of itemsWithRecipe) {\n  // check if the item which the recipe belongs to exists in the normalized set\n  // this is because we might have already filtered it out\n  if (normalizeSanitizedItems[key]) {\n    normalizeSanitizedItems[key].components!.push('recipe')\n  }\n}\n\n// append back recipe\nnormalizeSanitizedItems['recipe'] = {\n  id: -9999,\n  key: 'recipe',\n  dname: 'Recipe',\n  img: '/apps/dota2/images/items/recipe_lg.png?3',\n  components: null\n}\n\nexport const allItems = {\n  keys: Object.keys(normalizeSanitizedItems),\n  itemByKey: normalizeSanitizedItems\n}\n\nlet filteredItemsWithComponents = allItems.keys.reduce(\n  (prev, key) =>\n    allItems.itemByKey[key].components !== null\n      ? {\n          ...prev,\n          [key]: allItems.itemByKey[key]\n        }\n      : prev,\n  {} as typeof allItems.itemByKey\n)\n\nexport const itemsWithComponents = {\n  keys: Object.keys(filteredItemsWithComponents),\n  itemByKey: filteredItemsWithComponents\n}\n\nlet filteredItemsWithoutComponents = allItems.keys.reduce(\n  (prev, key) =>\n    allItems.itemByKey[key].components === null\n      ? {\n          ...prev,\n          [key]: allItems.itemByKey[key]\n        }\n      : prev,\n  {} as typeof allItems.itemByKey\n)\n\nexport const itemsWithoutComponents = {\n  keys: Object.keys(filteredItemsWithoutComponents),\n  itemByKey: filteredItemsWithoutComponents\n}\n\nconst usageMap: Record<string, number> = {}\n\nfor (const key of allItems.keys) {\n  usageMap[key] = 0\n}\n\nfor (const key of allItems.keys) {\n  const component = allItems.itemByKey[key].components\n  if (component !== null) {\n    for (const c of component) {\n      usageMap[c] = usageMap[c] + 1\n    }\n  }\n  // } else {\n  // usageMap[key] = usageMap[key] + 1\n  // }\n}\n\nexport const shuffleStock = Object.keys(usageMap).reduce(\n  (prev, key) => (usageMap[key] > 0 ? [...prev, key] : prev),\n  [] as string[]\n)\n","import { allItems } from './transformODotaConstants'\n\nexport const selectItem = (key: string) => {\n  return allItems.itemByKey[key]\n}\n","import React, { memo, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { sample } from 'lodash'\nimport { Store } from '../../types/Store'\nimport { ENCOURAGEMENT_TEXT } from '../../util/constants'\n\ntype Props = {\n  gameState: Store.App['gameState']\n  nextHandler: () => any\n}\n\nconst StateKeyFrames = keyframes`\n  0% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(-30px);\n    opacity: 0;\n  }\n`\n\nconst State = styled('div')`\n  display: block;\n  font-weight: 700;\n  font-size: 1.5rem;\n  opacity: 0;\n  margin: 0;\n  animation: ${StateKeyFrames} 0.5s linear;\n`\n\nexport const Status = memo(function(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  useEffect(() => {\n    if (props.gameState === 'SUCCESS') {\n      const timeout = setTimeout(() => {\n        clearTimeout(timeout)\n        props.nextHandler()\n      }, 750)\n    }\n  }, [props.gameState])\n\n  switch (props.gameState) {\n    case 'SUCCESS':\n      return <State>{sample(ENCOURAGEMENT_TEXT)}</State>\n    case 'FAIL':\n      return <State>Wrong!</State>\n    default:\n      return <State key={'None'}> ‏‏‎ </State>\n  }\n})\n","import React, { memo, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Store } from '../../types/Store'\n\ntype Props = {\n  score: Store.App['score']\n}\n\nconst ScoreKeyFrames = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`\n\nconst ScoreLabel = styled('div')`\n  font-weight: 700;\n  animation: ${ScoreKeyFrames} 0.5s ease;\n  font-size: 1.75rem;\n`\n\nexport const Score = memo(function(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  return <ScoreLabel key={Math.random()}>{props.score}</ScoreLabel>\n})\n","export enum AppActionTypes {\n  TOGGLE_GUESS = 'TOGGLE_GUESS',\n  ADD_GUESS = 'ADD_GUESS',\n  REMOVE_GUESS = 'REMOVE_GUESS',\n  NEXT_QUIZ = 'NEXT_QUIZ',\n  RESTART_GAME = 'RESTART_GAME',\n  SELECT_GAME_MODE = 'SELECT_GAME_MODE',\n  CLEAR_GAME_MODE = 'CLEAR_GAME_MODE',\n  REDUCE_TRIES = 'REDUCE_TRIES'\n}\nexport enum TimerProgressActionTypes {\n  SET_PROGRESS = 'SET_PROGRESS'\n}\n","export interface Action<T extends string> {\n  type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n  payload: P\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P>(\n  type: T,\n  payload: P\n): ActionWithPayload<T, P>\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === undefined ? { type } : { type, payload }\n}\n","import { createAction } from '../../types/ActionHelpers'\nimport { AppActionTypes } from '../../types/ActionTypes'\nimport { Dispatch } from 'redux'\nimport { Store } from '../../types/Store'\n\nexport const toggleGuess = (dispatch: Dispatch) => (guess: string) =>\n  dispatch(createAction(AppActionTypes.TOGGLE_GUESS, guess))\n\nexport const addGuess = (dispatch: Dispatch) => (guess: number) =>\n  dispatch(createAction(AppActionTypes.ADD_GUESS, guess))\n\nexport const removeGuess = (dispatch: Dispatch) => (guess: number) =>\n  dispatch(createAction(AppActionTypes.REMOVE_GUESS, guess))\n\nexport const nextQuiz = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.NEXT_QUIZ))\n\nexport const restartGame = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.RESTART_GAME))\n\nexport const selectGameMode = (dispatch: Dispatch) => (\n  gameMode: Store.App['gameMode']\n) => dispatch(createAction(AppActionTypes.SELECT_GAME_MODE, gameMode))\n\nexport const clearGameMode = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.CLEAR_GAME_MODE))\n\nexport const reduceTries = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.REDUCE_TRIES))\n","import { createSelector } from 'reselect'\nimport { Store } from '../../types/Store'\n\nconst selectCurrentIndex = (state: Store.All) => state.App.currentIndex\nconst selectItemList = (state: Store.All) => state.App.itemList\nexport const selectCurrentChoices = (state: Store.All) => state.App.choices\n\nexport const selectCurrentItem = createSelector(\n  selectItemList,\n  selectCurrentIndex,\n  (list, i) => list[i]\n)\n\nexport const selectCurrentGuesses = (state: Store.All) => state.App.guesses\n\nexport const selectCurrentGuessState = createSelector(\n  selectCurrentChoices,\n  selectCurrentGuesses,\n  (a, b) => {\n    return b.map(guess => {\n      if (guess === null) {\n        return null\n      } else {\n        return a[guess]\n      }\n    })\n  }\n)\n\nexport const selectCurrentProgress = createSelector(\n  selectItemList,\n  selectCurrentIndex,\n  (list, i) => [i + 1, list.length]\n)\n","import React, { memo } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\ntype Props = {\n  streak: number\n  streakBonus: number\n  currentCount: number\n  totalCount: number\n  triesLeft: number\n}\n\nconst Container = styled('div')`\n  display: flex;\n  padding: 8px;\n  justify-content: space-between;\n`\n\nconst Label = styled('div')`\n  font-weight: 500;\n`\n\nconst TriesKeyFrames = keyframes`\n  from {\n    transform: scale(1.5)\n  }\n  to {\n    transform: scale(1)\n  }\n`\n\nconst TriesShakeKeyFrames = keyframes`\n0% { transform: translate(2px, 1px) rotate(0deg); }\n10% { transform: translate(-1px, -2px) rotate(-1deg); }\n20% { transform: translate(-3px, 0px) rotate(1deg); }\n30% { transform: translate(0px, 2px) rotate(0deg); }\n40% { transform: translate(1px, -1px) rotate(1deg); }\n50% { transform: translate(-1px, 2px) rotate(-1deg); }\n60% { transform: translate(-3px, 1px) rotate(0deg); }\n70% { transform: translate(2px, 1px) rotate(-1deg); }\n80% { transform: translate(-1px, -1px) rotate(1deg); }\n90% { transform: translate(2px, 2px) rotate(0deg); }\n100% { transform: translate(1px, -2px) rotate(-1deg); }\n`\n\nconst TriesLabel = styled(Label)<{ triesLeft: number }>`\n  transform-origin: top left;\n  ${props =>\n    props.triesLeft !== 3 &&\n    props.triesLeft !== 0 &&\n    css`\n      animation: ${TriesKeyFrames} 0.5s cubic-bezier(0.6, -0.28, 0.735, 0.045);\n    `}\n`\n\nconst TriesLabelShake = styled(Label)<{ triesLeft: number }>`\n  transform-origin: center;\n  color: ${props => (props.triesLeft <= 1 ? '#ff1744' : 'inherit')};\n  ${props =>\n    props.triesLeft === 1 &&\n    css`\n      animation: ${TriesShakeKeyFrames} 1s infinite;\n    `}\n`\n\nconst Tries = memo(function({\n  triesLeft\n}: {\n  triesLeft: number\n}): React.FunctionComponentElement<{ triesLeft: number }> {\n  return (\n    <TriesLabel key={Math.random()} triesLeft={triesLeft}>\n      <TriesLabelShake triesLeft={triesLeft}>\n        {triesLeft === 1 ? '1 try' : `${triesLeft} tries`} left\n      </TriesLabelShake>\n    </TriesLabel>\n  )\n})\n\nexport function Header(props: Props): React.FunctionComponentElement<Props> {\n  return (\n    <Container>\n      <Tries triesLeft={props.triesLeft} />\n      <Label>\n        x{props.streak} (+{props.streakBonus})\n      </Label>\n      <Label>\n        {props.currentCount} of {props.totalCount}\n      </Label>\n    </Container>\n  )\n}\n","import { BASE_POINTS } from './constants'\n\nexport const calculateStreakBonus = (streak: number) => {\n  return Math.pow(streak, 2) * 0.01 * BASE_POINTS\n}\n","import React, { useEffect, useState } from 'react'\nimport { TIMER_BASE_TIME_MS } from '../../util/constants'\nimport styled from 'styled-components'\nimport { Store } from '../../types/Store'\n\nconst TICK_INTERVAL = 100\n\ntype Props = {\n  triesLeft: number\n  gameState: Store.App['gameState']\n  reduceTries: () => any\n  setProgress: (progress: number) => any\n}\n\nconst TimerLabel = styled('code')`\n  display: block;\n  font-size: 1.25rem;\n`\n\nexport function Timer(props: Props): React.FunctionComponentElement<Props> {\n  const [prevTries, setPrevTries] = useState<null | number>(null)\n  const [prevGameState, setPrevGameState] = useState<\n    null | Store.App['gameState']\n  >(null)\n  const [countdown, setCountdown] = useState(TIMER_BASE_TIME_MS)\n  if (props.triesLeft !== prevTries) {\n    setPrevTries(props.triesLeft)\n  }\n  if (props.gameState !== prevGameState) {\n    setPrevGameState(props.gameState)\n  }\n  if (\n    props.triesLeft !== prevTries ||\n    (props.gameState === 'WAITING' && prevGameState === 'SUCCESS')\n  ) {\n    setCountdown(TIMER_BASE_TIME_MS)\n  }\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (\n        countdown > 0 &&\n        (prevGameState === 'WAITING' || prevGameState === 'FAIL') &&\n        props.triesLeft > 0\n      ) {\n        setCountdown(countdown - TICK_INTERVAL)\n        props.setProgress(\n          ((countdown - TICK_INTERVAL) / TIMER_BASE_TIME_MS) * 100\n        )\n      }\n      if (countdown <= 0 && props.triesLeft > 0) {\n        props.reduceTries()\n      }\n    }, TICK_INTERVAL)\n    return () => {\n      clearTimeout(timer)\n    }\n  })\n  return null as any\n}\n","import { createAction } from '../../types/ActionHelpers'\nimport { TimerProgressActionTypes } from '../../types/ActionTypes'\nimport { Dispatch } from 'redux'\n\nexport const setProgress = (dispatch: Dispatch) => (progress: number) =>\n  dispatch(createAction(TimerProgressActionTypes.SET_PROGRESS, progress))\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GameOverScreen } from '../GameOverScreen'\nimport Item from '../Item'\nimport { selectItem } from '../../util/selectItemData'\nimport { Status } from '../Status'\nimport { Score } from '../Score'\nimport { connect } from 'react-redux'\nimport {\n  removeGuess,\n  toggleGuess,\n  restartGame,\n  nextQuiz,\n  addGuess,\n  clearGameMode,\n  reduceTries\n} from '../../store/actions/appActions'\nimport { Dispatch } from 'redux'\nimport {\n  selectCurrentItem,\n  selectCurrentChoices,\n  selectCurrentGuessState,\n  selectCurrentGuesses,\n  selectCurrentProgress\n} from '../../store/selectors/appSelector'\nimport { Store } from '../../types/Store'\nimport { Header } from '../Header'\nimport { calculateStreakBonus } from '../../util/streakBonus'\nimport { Timer } from '../Timer'\nimport { setProgress } from '../../store/actions/progressBarActions'\n\nconst Container = styled('div')`\n  display: flex;\n  justify-content: center;\n  max-width: 100%;\n  flex-wrap: wrap;\n  margin-bottom: 8px;\n  & > div {\n    margin: 8px;\n  }\n`\n\nconst StatusContainer = styled('div')`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 0px;\n`\n\nclass Game extends React.Component<\n  ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n> {\n  nextChoice = () => {\n    this.props.nextQuiz()\n  }\n  restartGame = () => {\n    this.props.restartGame()\n  }\n  clearGameMode = () => {\n    this.props.clearGameMode()\n  }\n  render() {\n    const {\n      currentItem,\n      choices,\n      guesses,\n      guessesIndex,\n      gameState,\n      score,\n      tries,\n      streak,\n      highestStreak,\n      gameMode\n    } = this.props\n    const [current, total] = this.props.currentProgress\n    const streakBonus = calculateStreakBonus(streak)\n    const item = selectItem(currentItem)\n    return (\n      <div>\n        <Header\n          triesLeft={tries}\n          streak={streak}\n          streakBonus={streakBonus}\n          currentCount={current}\n          totalCount={total}\n        />\n        {(gameState === 'GAME_OVER' || gameState === 'GAME_WON') && (\n          <GameOverScreen\n            score={score}\n            highestStreak={highestStreak}\n            currentCount={current}\n            handleRestart={this.restartGame}\n            handleModeReselect={this.clearGameMode}\n            gameState={gameState}\n            gameMode={gameMode}\n            currentItemElement={\n              <Item\n                img={process.env.REACT_APP_CDN_URL + item.img}\n                name={item.dname}\n              />\n            }\n            answerElement={guesses.map(guess => {\n              if (guess !== null) {\n                const item = selectItem(guess)\n                return (\n                  <Item\n                    img={process.env.REACT_APP_CDN_URL + item.img}\n                    name={item.dname}\n                  />\n                )\n              } else {\n                return <Item img={''} name={''} />\n              }\n            })}\n          />\n        )}\n        <StatusContainer>\n          <Status gameState={gameState} nextHandler={this.nextChoice} />\n        </StatusContainer>\n        {gameMode === 'TIMED' && (\n          <Timer\n            triesLeft={tries}\n            reduceTries={this.props.reduceTries}\n            gameState={gameState}\n            setProgress={this.props.setProgress}\n          />\n        )}\n        <Container>\n          <Item\n            img={process.env.REACT_APP_CDN_URL + item.img}\n            name={item.dname}\n          />\n        </Container>\n        <Container>\n          {guesses.map((guess, index) => {\n            if (guess !== null) {\n              const item = selectItem(guess)\n              return (\n                <Item\n                  img={process.env.REACT_APP_CDN_URL + item.img}\n                  name={item.dname}\n                  onClick={() => this.props.removeGuess(index)}\n                />\n              )\n            } else {\n              return <Item img={''} name={''} />\n            }\n          })}\n        </Container>\n        <Container>\n          {choices.map((choice, index) => {\n            const item = selectItem(choice)\n            return (\n              <Item\n                img={process.env.REACT_APP_CDN_URL + item.img}\n                name={item.dname}\n                onClick={() => this.props.addGuess(index)}\n                disabled={!!~guessesIndex.indexOf(index)}\n              />\n            )\n          })}\n        </Container>\n        <Container>\n          <Score score={score} />\n        </Container>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  toggleGuess: toggleGuess(dispatch),\n  removeGuess: removeGuess(dispatch),\n  addGuess: addGuess(dispatch),\n  nextQuiz: nextQuiz(dispatch),\n  restartGame: restartGame(dispatch),\n  clearGameMode: clearGameMode(dispatch),\n  reduceTries: reduceTries(dispatch),\n  setProgress: setProgress(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  gameState: state.App.gameState,\n  score: state.App.score,\n  tries: state.App.tries,\n  streak: state.App.streak,\n  highestStreak: state.App.highestStreak,\n  gameMode: state.App.gameMode,\n  currentItem: selectCurrentItem(state),\n  choices: selectCurrentChoices(state),\n  guesses: selectCurrentGuessState(state),\n  guessesIndex: selectCurrentGuesses(state),\n  currentProgress: selectCurrentProgress(state)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst BoxWrapper = styled('div')`\n  display: flex;\n  justify-content: center;\n  margin: 16px;\n`\n\nconst BoxInner = styled('div')`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Box = styled('button')`\n  border: 2px solid black;\n  border-radius: 4px;\n  height: 50px;\n  font-size: 1.5rem;\n  margin-bottom: 16px;\n`\n\ntype Props = {\n  selectClassic: () => any\n  selectHardcoreClassic: () => any\n  selectTimed: () => any\n}\n\nclass ModeSelect extends React.Component<Props> {\n  render() {\n    return (\n      <BoxWrapper>\n        <BoxInner>\n          <Box onClick={this.props.selectClassic}>Classic</Box>\n          <Box onClick={this.props.selectHardcoreClassic}>Hardcore Classic</Box>\n          <Box onClick={this.props.selectTimed}>Timed Classic</Box>\n        </BoxInner>\n      </BoxWrapper>\n    )\n  }\n}\n\nexport default ModeSelect\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Game from './components/Game'\nimport ModeSelect from './components/ModeSelect'\nimport { Store } from './types/Store'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { selectGameMode } from './store/actions/appActions'\n\nconst AppContainer = styled('div')`\n  max-width: 600px;\n  margin: 0 auto;\n`\nconst AppDescription = styled('p')`\n  margin: 0;\n  margin-top: 16px;\n`\n\nconst AppDescriptionSuper = styled(AppDescription)`\n  font-weight: 500;\n  font-size: 1.25rem;\n`\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nclass App extends Component<\n  ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n> {\n  selectClassic = () => this.props.selectGameMode('CLASSIC')\n  selectHardcoreClassic = () => this.props.selectGameMode('HARDCORE_CLASSIC')\n  selectTimed = () => this.props.selectGameMode('TIMED')\n\n  render() {\n    const { gameMode } = this.props\n    return (\n      <AppContainer>\n        {gameMode === 'NONE' && (\n          <Wrapper>\n            <AppDescriptionSuper>\n              Test your Dota 2 item knowledge\n            </AppDescriptionSuper>\n            <AppDescription>Select a mode to begin</AppDescription>\n            <ModeSelect\n              selectClassic={this.selectClassic}\n              selectHardcoreClassic={this.selectHardcoreClassic}\n              selectTimed={this.selectTimed}\n            />\n          </Wrapper>\n        )}\n        {gameMode !== 'NONE' && <Game />}\n      </AppContainer>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  selectGameMode: selectGameMode(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  gameMode: state.App.gameMode\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  itemsWithComponents,\n  shuffleStock\n} from '../../util/transformODotaConstants'\nimport { difference, sampleSize, shuffle } from 'lodash'\n\nexport function generateChoice(item: string, choiceLength: number) {\n  let choiceSize = choiceLength\n  // get the components for the given item\n  const components = (itemsWithComponents as any).itemByKey[item].components!\n  // check if the choice size is less than the component's length\n  // if it is, then we return the component's length + 1 as default\n  if (choiceSize <= components.length) {\n    choiceSize = components.length + 1\n  }\n  // now we do a set negation on the shuffle stock and the item's component\n  const diff = difference(shuffleStock, components, [item])\n  // and then we sample the set for (choiceSize - component length) items\n  const choices = sampleSize(diff, choiceSize - components.length)\n\n  return {\n    choices: shuffle([...components, ...choices]) as string[],\n    answer: components as string[]\n  }\n}\n","import produce from 'immer'\nimport { shuffle, difference } from 'lodash'\nimport { Store } from '../../types/Store'\nimport { ActionWithPayload, Action } from '../../types/ActionHelpers'\nimport { AppActionTypes } from '../../types/ActionTypes'\nimport { itemsWithComponents } from '../../util/transformODotaConstants'\nimport { generateChoice } from '../game/generateChoice'\nimport { BASE_POINTS } from '../../util/constants'\nimport { calculateStreakBonus } from '../../util/streakBonus'\n\nconst getDefaultState = (): Store.App => {\n  const itemList = shuffle(itemsWithComponents.keys)\n  const choiceLength = 8\n  const choice = generateChoice(itemList[0], choiceLength)\n  return {\n    itemList,\n    answer: choice.answer,\n    choices: choice.choices,\n    guesses: choice.answer.map(_ => null),\n    currentIndex: 0,\n    score: 0,\n    choiceLength,\n    gameState: 'WAITING',\n    tries: 3,\n    streak: 0,\n    highestStreak: 0,\n    gameMode: 'NONE'\n  }\n}\n\nconst getGameModeState = (gameMode: Store.App['gameMode']): Store.App => {\n  switch (gameMode) {\n    case 'CLASSIC':\n      return {\n        ...getDefaultState(),\n        gameMode: 'CLASSIC' as Store.App['gameMode']\n      }\n    case 'HARDCORE_CLASSIC':\n      return {\n        ...getDefaultState(),\n        gameMode: 'HARDCORE_CLASSIC' as Store.App['gameMode'],\n        tries: 1\n      }\n    case 'TIMED':\n      return {\n        ...getDefaultState(),\n        gameMode: 'TIMED' as Store.App['gameMode']\n      }\n    default: {\n      return getDefaultState()\n    }\n  }\n}\n\nexport const appReducer = (\n  prevState = getDefaultState(),\n  action: ActionWithPayload<AppActionTypes, any> & Action<any>\n) =>\n  produce(prevState, draft => {\n    switch (action.type) {\n      case AppActionTypes.REDUCE_TRIES: {\n        draft.tries--\n        if (draft.tries === 0) {\n          draft.gameState = 'GAME_OVER'\n          draft.guesses = prevState.answer.map(answer =>\n            prevState.choices.indexOf(answer)\n          )\n        }\n        return\n      }\n      case AppActionTypes.CLEAR_GAME_MODE: {\n        draft.gameMode = 'NONE'\n        return\n      }\n      case AppActionTypes.SELECT_GAME_MODE: {\n        return getGameModeState(action.payload)\n      }\n      case AppActionTypes.RESTART_GAME: {\n        return getGameModeState(prevState.gameMode)\n      }\n      case AppActionTypes.NEXT_QUIZ: {\n        if (\n          prevState.gameState === 'FAIL' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        if (prevState.currentIndex === prevState.itemList.length - 1) {\n          draft.gameState = 'GAME_WON'\n          return\n        }\n        const choice = generateChoice(\n          prevState.itemList[draft.currentIndex + 1],\n          prevState.choiceLength\n        )\n        draft.gameState = 'WAITING'\n        draft.currentIndex = draft.currentIndex + 1\n        draft.choices = choice.choices\n        draft.answer = choice.answer\n        draft.guesses = choice.answer.map(_ => null)\n      }\n      case AppActionTypes.ADD_GUESS: {\n        if (\n          prevState.gameState === 'SUCCESS' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        const index = prevState.guesses.indexOf(null)\n        if (~index) {\n          draft.guesses[index] = action.payload\n        }\n        // check if the board is full and check if the answer is correct\n        if (!~draft.guesses.indexOf(null) && draft.gameState === 'WAITING') {\n          if (\n            difference(draft.guesses.map(d => draft.choices[d!]), draft.answer)\n              .length === 0\n          ) {\n            draft.gameState = 'SUCCESS'\n            draft.score =\n              draft.score + BASE_POINTS + calculateStreakBonus(prevState.streak)\n            draft.streak = draft.streak + 1\n            if (draft.streak > draft.highestStreak) {\n              draft.highestStreak = draft.streak\n            }\n          } else {\n            draft.tries = draft.tries - 1\n            if (draft.tries === 0) {\n              draft.gameState = 'GAME_OVER'\n              draft.guesses = prevState.answer.map(answer =>\n                prevState.choices.indexOf(answer)\n              )\n            } else {\n              draft.gameState = 'FAIL'\n            }\n            draft.streak = 0\n          }\n        }\n        return\n      }\n      case AppActionTypes.REMOVE_GUESS: {\n        if (\n          prevState.gameState === 'SUCCESS' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        const index = action.payload\n        if (prevState.guesses[index] !== null) {\n          draft.guesses[index] = null\n          if (draft.gameState === 'FAIL') {\n            draft.gameState = 'WAITING'\n          }\n        }\n        return\n      }\n      default:\n        return\n    }\n  })\n","import produce from 'immer'\nimport { Store } from '../../types/Store'\nimport { ActionWithPayload, Action } from '../../types/ActionHelpers'\nimport {\n  TimerProgressActionTypes,\n  AppActionTypes\n} from '../../types/ActionTypes'\n\nconst defaultState: Store.TimerProgress = {\n  progress: 100\n}\n\nexport const timerProgressReducer = (\n  prevState = defaultState,\n  action: ActionWithPayload<TimerProgressActionTypes | AppActionTypes, any> &\n    Action<any>\n) =>\n  produce(prevState, draft => {\n    switch (action.type) {\n      case AppActionTypes.SELECT_GAME_MODE:\n      case AppActionTypes.CLEAR_GAME_MODE: {\n        draft.progress = 100\n      }\n      case TimerProgressActionTypes.SET_PROGRESS: {\n        draft.progress = action.payload\n        return\n      }\n      default:\n        return\n    }\n  })\n","import { combineReducers } from 'redux'\nimport { appReducer } from './App'\nimport { timerProgressReducer } from './TimerProgress'\n\nexport const rootReducer = combineReducers({\n  App: appReducer,\n  TimerProgress: timerProgressReducer\n})\n","import { createStore } from 'redux'\nimport { rootReducer } from './reducers'\n\nexport const store = createStore(\n  rootReducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Store } from '../../types/Store'\nimport { connect } from 'react-redux'\nimport { clearGameMode } from '../../store/actions/appActions'\nimport { Dispatch } from 'redux'\n\nconst Wrapper = styled('div')`\n  width: 100%;\n  height: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n`\n\nconst InnerWrapper = styled('div')`\n  display: flex;\n  max-width: 600px;\n  width: 600px;\n  justify-content: space-between;\n`\n\nconst Title = styled('p')`\n  text-transform: uppercase;\n  margin: 0;\n  padding: 0 8px 0 8px;\n  font-weight: 700;\n`\n\nconst TitleButton = styled(Title)`\n  color: #673ab7;\n  user-select: none;\n  cursor: pointer;\n`\n\nconst Meter = styled(`div`)`\n  height: 5px;\n  background: #555;\n  width: 100%;\n  z-index: 1;\n`\n\nconst MeterBar = styled('span')<{ progress: number }>`\n  height: 100%;\n  position: relative;\n  width: ${props => props.progress}%;\n  display: block;\n  overflow: hidden;\n  background-color: #f8bbd0;\n  transition: width 0.1s linear;\n`\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  clearGameMode: clearGameMode(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  progress: state.TimerProgress.progress,\n  gameMode: state.App.gameMode\n})\n\nexport const SuperHeader = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(function(\n  props: ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>\n): React.FunctionComponentElement<{}> {\n  return (\n    <>\n      <Wrapper>\n        <InnerWrapper>\n          <Title>THE SHOPKEEPER'S QUIZ</Title>\n          {props.gameMode !== 'NONE' && (\n            <TitleButton onClick={props.clearGameMode}>MODE SELECT</TitleButton>\n          )}\n        </InnerWrapper>\n      </Wrapper>\n      <Meter>\n        <MeterBar progress={props.progress} />\n      </Meter>\n    </>\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './store'\nimport { SuperHeader } from './components/SuperHeader'\n\nReactDOM.render(\n  <Provider store={store}>\n    <SuperHeader />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}