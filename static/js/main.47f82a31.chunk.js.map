{"version":3,"sources":["util/constants.ts","components/Modal/index.tsx","components/GameOverScreen/index.tsx","util/getGameModeString.ts","components/Item/index.tsx","util/transformODotaConstants.ts","util/transformODotaConstantsById.ts","util/selectItemData.ts","components/Status/index.tsx","components/Score/index.tsx","types/ActionTypes.ts","types/ActionHelpers.ts","store/actions/appActions.ts","store/selectors/appSelector.ts","components/Header/index.tsx","util/streakBonus.ts","components/Timer/index.tsx","store/actions/progressBarActions.ts","components/Game/index.tsx","components/ModeSelect/index.tsx","App.tsx","serviceWorker.ts","store/game/generateChoice.ts","store/reducers/App.ts","store/reducers/TimerProgress.ts","store/reducers/index.ts","store/middlewares/actionLogger.ts","store/index.ts","components/SuperHeader/index.tsx","index.tsx"],"names":["ENCOURAGEMENT_TEXT","WIN_TEXT","LOSE_TEXT","ModalWrapper","styled","Modal","GameOverWrapperKeyFrames","keyframes","GameOverModalKeyFrames","GameOverWrapper","GameOverModal","Title","Score","Label","GameModeLabel","BoxWrapper","Box","RetryButton","ItemsWrapper","Items","GameOverScreen","props","gameState","sample","gameMode","getGameModeString","currentItemElement","answerElement","score","highestStreak","currentCount","onClick","handleRestart","handleModeReselect","Icon","img","disabled","NameTag","Wrapper","Item","name","excludeIds","deprecatedIds","items","Object","keys","DotaConstantsItems","map","key","item","id","dname","components","filter","includes","itemsWithRecipe","reduce","prev","curr","replace","recipeIds","sanitizedItems","removedItems","remove","str","startsWith","times","length","constant","normalizeSanitizedItems","push","allItems","itemByKey","filteredItemsWithComponents","itemsWithComponents","filteredItemsWithoutComponents","itemsWithoutComponents","usageMap","component","c","transformToIdFromKeys","k","Boolean","String","transformItemsWithComponentsToId","transformItemsWithoutComponentsToId","allItemsById","ids","itemsById","itemsWithComponentsById","shuffleStockById","getShuffleStock","selectItemById","StateKeyFrames","State","Status","memo","nextHandler","useEffect","timeout","setTimeout","clearTimeout","AppActionTypes","TimerProgressActionTypes","ScoreKeyFrames","ScoreLabel","Math","random","createAction","type","payload","undefined","toggleGuess","dispatch","guess","TOGGLE_GUESS","addGuess","ADD_GUESS","removeGuess","REMOVE_GUESS","nextQuiz","NEXT_QUIZ","restartGame","RESTART_GAME","selectGameMode","SELECT_GAME_MODE","clearGameMode","CLEAR_GAME_MODE","reduceTries","REDUCE_TRIES","selectCurrentIndex","state","App","currentIndex","selectItemList","itemList","selectCurrentChoices","choices","selectCurrentItem","createSelector","list","i","selectCurrentGuesses","guesses","selectCurrentGuessState","a","b","selectCurrentProgress","Container","TriesKeyFrames","TriesShakeKeyFrames","TriesLabel","triesLeft","css","TriesLabelShake","Tries","Header","streak","streakBonus","totalCount","calculateStreakBonus","pow","Timer","useState","prevTries","setPrevTries","prevGameState","setPrevGameState","countdown","setCountdown","timer","setProgress","progress","SET_PROGRESS","StatusContainer","Game","nextChoice","this","currentItem","guessesIndex","tries","currentProgress","current","total","process","index","choice","indexOf","React","Component","connect","BoxInner","ModeSelect","selectClassic","selectHardcoreClassic","selectTimed","AppContainer","AppDescription","AppDescriptionSuper","window","location","hostname","match","generateChoice","choiceLength","choiceSize","diff","difference","sampleSize","shuffle","answer","getDefaultState","_","getGameModeState","defaultState","rootReducer","combineReducers","prevState","action","produce","draft","d","TimerProgress","__GLOBAL_ACTIONS__","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","getState","InnerWrapper","TitleButton","Meter","MeterBar","SuperHeader","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47f82a31.chunk.js","sourcesContent":["export const BASE_POINTS = 200\nexport const TIMER_BASE_TIME_MS = 7000\nexport const ENCOURAGEMENT_TEXT = ['Great!', 'Perfect!', 'Correct!']\nexport const WIN_TEXT = [\n  '100 out of 100!',\n  'All Correct!',\n  'Fine, you win.',\n  'Not bad!'\n]\nexport const LOSE_TEXT = ['Better luck next time!', 'Game Over!', 'Try again!']\n","import styled from 'styled-components'\n\nexport const ModalWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  flex-direction: column;\n  background-color: white;\n`\n\nexport const Modal = styled('div')`\n  margin: 0 auto;\n  display: flex;\n  padding: 16px;\n  flex-direction: column;\n  align-items: center;\n`\n","import React from 'react'\nimport { Store } from '../../types/Store'\nimport styled, { keyframes } from 'styled-components'\nimport sample from 'lodash/sample'\nimport { LOSE_TEXT, WIN_TEXT } from '../../util/constants'\nimport { ModalWrapper, Modal } from '../Modal'\nimport { getGameModeString } from '../../util/getGameModeString'\n\ntype Props = {\n  score: Store.App['score']\n  highestStreak: Store.App['highestStreak']\n  gameState: Store.App['gameState']\n  currentCount: number\n  handleRestart: () => any\n  handleModeReselect: () => any\n  children?: React.ReactNode\n  currentItemElement: JSX.Element\n  answerElement: JSX.Element[]\n  gameMode: Store.App['gameMode']\n}\n\nconst GameOverWrapperKeyFrames = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\n\nconst GameOverModalKeyFrames = keyframes`\n  from {\n    transform: scale(0.75);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n`\n\nconst GameOverWrapper = styled(ModalWrapper)`\n  transform-origin: top center;\n  animation: ${GameOverWrapperKeyFrames} 0.5s ease;\n`\n\nconst GameOverModal = styled(Modal)`\n  animation: ${GameOverModalKeyFrames} 0.5s ease;\n`\n\nconst Title = styled('h1')`\n  margin: 0 0 8px 0;\n  text-align: center;\n`\n\nconst Score = styled('h2')`\n  margin: 0;\n  font-size: 4rem;\n`\n\nconst Label = styled('p')`\n  margin: 0;\n  text-transform: uppercase;\n  color: grey;\n  font-weight: 500;\n  font-size: 0.75rem;\n`\n\nconst GameModeLabel = styled(Label)`\n  color: black;\n  margin-bottom: 8px;\n`\n\nconst BoxWrapper = styled('div')`\n  display: flex;\n  & > div {\n    margin: 16px;\n  }\n`\n\nconst Box = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst RetryButton = styled('button')`\n  border: 2px solid black;\n  font-size: 1.5rem;\n  border-radius: 4px;\n  margin: 8px;\n`\n\nconst ItemsWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  & > div {\n    margin: 4px;\n  }\n`\n\nconst Items = styled('div')`\n  display: flex;\n  margin-bottom: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n  & > div {\n    margin: 4px;\n  }\n`\n\nexport function GameOverScreen(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  return (\n    <GameOverWrapper>\n      <GameOverModal>\n        <Title>\n          {props.gameState === 'GAME_OVER'\n            ? sample(LOSE_TEXT)\n            : sample(WIN_TEXT)}\n        </Title>\n        <GameModeLabel>MODE: {getGameModeString(props.gameMode)}</GameModeLabel>\n        {props.gameState === 'GAME_OVER' && (\n          <ItemsWrapper>\n            <Items>{props.currentItemElement}</Items>\n            <Items>{props.answerElement}</Items>\n          </ItemsWrapper>\n        )}\n        <Box>\n          <Label>Your final score</Label>\n          <Score>{props.score}</Score>\n        </Box>\n        <BoxWrapper>\n          <Box>\n            <Label>Highest Streak</Label>\n            <Score>{props.highestStreak}</Score>\n          </Box>\n          <Box>\n            <Label>Completed Items</Label>\n            <Score>\n              {props.gameState === 'GAME_OVER'\n                ? props.currentCount - 1\n                : props.currentCount}\n            </Score>\n          </Box>\n        </BoxWrapper>\n\n        <RetryButton onClick={props.handleRestart}>\n          {props.gameState === 'GAME_OVER' ? 'Retry' : 'Start Over'}\n        </RetryButton>\n        <RetryButton onClick={props.handleModeReselect}>\n          Change Game Mode\n        </RetryButton>\n      </GameOverModal>\n    </GameOverWrapper>\n  )\n}\n","import { Store } from '../types/Store'\n\nexport const getGameModeString = (gameMode: Store.App['gameMode']) => {\n  switch (gameMode) {\n    case 'CLASSIC':\n      return 'Classic'\n    case 'HARDCORE_CLASSIC':\n      return 'Hardcore Classic'\n    case 'TIMED':\n      return 'Timed'\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Icon = styled('div')<{ img: string; disabled: boolean }>`\n  width: 77px;\n  height: 59px;\n  background-image: url(${props => props.img});\n  background-position: center;\n  background-size: cover;\n  opacity: ${props => (props.disabled ? '0.5' : '1')};\n  cursor: pointer;\n  outline: none;\n`\n\nconst NameTag = styled('span')`\n  padding: 4px;\n  text-shadow: 0px 0px 2px black;\n  position: absolute;\n  bottom: 0px;\n  font-weight: bold;\n  font-size: 0.66rem;\n  color: white;\n  user-select: none;\n`\n\nconst Wrapper = styled('div')`\n  position: relative;\n  border: 2px solid black;\n  border-radius: 4px;\n`\n\ntype Props = {\n  img: string\n  name: string\n  onClick?: any\n  disabled?: boolean\n}\n\nfunction Item(props: Props): React.FunctionComponentElement<Props> {\n  function handleClick() {\n    if (!props.disabled && props.onClick) {\n      props.onClick()\n    }\n  }\n  return (\n    <Wrapper>\n      <Icon img={props.img} onClick={handleClick} disabled={!!props.disabled}>\n        <NameTag>{props.name}</NameTag>\n      </Icon>\n    </Wrapper>\n  )\n}\n\nexport default Item\n","import includes from 'lodash/includes'\nimport remove from 'lodash/remove'\nimport constant from 'lodash/constant'\nimport times from 'lodash/times'\nimport { items as DotaConstantsItems } from 'dotaconstants'\n\nconst excludeIds = [\n  275, // trident\n  276, // combo_breaker\n  260, // refresher_shard\n  1021, // river_painter\n  1022, // river_painter2\n  1023, // river_painter3\n  1024, // river_painter4\n  1025, // river_painter5\n  1026, // river_painter6\n  1027, // river_painter7\n  1028, // mutation_tombstone\n  1029, // super_blink\n  1030, // pocket_tower\n  1032 // pocket_roshan\n]\n\nconst deprecatedIds = [\n  71, // poor_mans_shield\n  212, // ring_of_aquila\n  239, // iron_talon,\n  196 // diffusal_blade_2\n]\n\n// transform into array\n// filter useless items\n// filter deprecated ids\n// transform recipe into generic recipe\n\nconst items = Object.keys(DotaConstantsItems)\n  .map(key => {\n    const item = DotaConstantsItems[key]\n    return {\n      id: item.id,\n      key,\n      dname: item.dname,\n      img: item.img,\n      components: item.components\n    }\n  })\n  .filter(item => !includes(excludeIds, item.id))\n  .filter(item => !includes(deprecatedIds, item.id))\n\nconst itemsWithRecipe = items.reduce(\n  (prev, curr) =>\n    includes(curr.key, 'recipe_')\n      ? [...prev, curr.key.replace('recipe_', '')]\n      : prev,\n  [] as string[]\n)\n\nconst recipeIds = items.reduce(\n  (prev, curr) => (includes(curr.key, 'recipe_') ? [...prev, curr.id] : prev),\n  [] as number[]\n)\n\nconst sanitizedItems = items.filter(item => !includes(recipeIds, item.id))\n\nfor (let item of sanitizedItems) {\n  if (item.components !== null) {\n    // let occurrences = 0\n    const removedItems = remove(item.components, str =>\n      str.startsWith('recipe_')\n    )\n    item.components = [\n      ...item.components,\n      ...times(removedItems.length, constant('recipe'))\n    ]\n  }\n}\n\nconst normalizeSanitizedItems = sanitizedItems.reduce(\n  (prev, curr) => ({\n    ...prev,\n    [curr.key]: curr\n  }),\n  {} as {\n    [key: string]: {\n      id: number\n      key: string\n      dname: string\n      img: string\n      components: string[] | null\n    }\n  }\n)\n\nfor (const key of itemsWithRecipe) {\n  // check if the item which the recipe belongs to exists in the normalized set\n  // this is because we might have already filtered it out\n  const item = normalizeSanitizedItems[key]\n  if (item && item.components !== null) {\n    item.components.push('recipe')\n  }\n}\n\n// append back recipe\nnormalizeSanitizedItems['recipe'] = {\n  id: -9999,\n  key: 'recipe',\n  dname: 'Recipe',\n  img: '/apps/dota2/images/items/recipe_lg.png?3',\n  components: null\n}\n\n// use new sny icon\nnormalizeSanitizedItems['sange_and_yasha'].img =\n  '/apps/dota2/images/items/sange_and_yasha_lg.png'\n\nexport const allItems = {\n  keys: Object.keys(normalizeSanitizedItems),\n  itemByKey: normalizeSanitizedItems\n}\n\nlet filteredItemsWithComponents = allItems.keys.reduce(\n  (prev, key) =>\n    allItems.itemByKey[key].components !== null\n      ? {\n          ...prev,\n          [key]: allItems.itemByKey[key]\n        }\n      : prev,\n  {} as typeof allItems.itemByKey\n)\n\nexport const itemsWithComponents = {\n  keys: Object.keys(filteredItemsWithComponents),\n  itemByKey: filteredItemsWithComponents\n}\n\nlet filteredItemsWithoutComponents = allItems.keys.reduce(\n  (prev, key) =>\n    allItems.itemByKey[key].components === null\n      ? {\n          ...prev,\n          [key]: allItems.itemByKey[key]\n        }\n      : prev,\n  {} as typeof allItems.itemByKey\n)\n\nexport const itemsWithoutComponents = {\n  keys: Object.keys(filteredItemsWithoutComponents),\n  itemByKey: filteredItemsWithoutComponents\n}\n\nconst usageMap: Record<string, number> = {}\n\nfor (const key of allItems.keys) {\n  usageMap[key] = 0\n}\n\nfor (const key of allItems.keys) {\n  const component = allItems.itemByKey[key].components\n  if (component !== null) {\n    for (const c of component) {\n      usageMap[c] = usageMap[c] + 1\n    }\n  }\n}\n\nexport const shuffleStock = Object.keys(usageMap).reduce(\n  (prev, key) => (usageMap[key] > 0 ? [...prev, key] : prev),\n  [] as string[]\n)\n","import {\n  allItems,\n  itemsWithComponents,\n  itemsWithoutComponents\n} from './transformODotaConstants'\n\ntype ItemDataById = {\n  [id: string]: {\n    id: number\n    key: string\n    dname: string\n    img: string\n    components: string[] | null\n  }\n}\nconst transformToIdFromKeys = Object.keys(allItems.itemByKey).reduce(\n  (prev, key) => {\n    const id = allItems.itemByKey[key].id\n    const item = allItems.itemByKey[key]\n    const components = item.components\n      ? item.components\n          .filter(k => Boolean(k))\n          .map(k => String(allItems.itemByKey[k].id))\n      : null\n    return {\n      ...prev,\n      [id]: {\n        ...item,\n        components\n      }\n    }\n  },\n  {} as ItemDataById\n)\n\nconst transformItemsWithComponentsToId = Object.keys(\n  itemsWithComponents.itemByKey\n).reduce((prev, key) => {\n  const id = itemsWithComponents.itemByKey[key].id\n  const item = itemsWithComponents.itemByKey[key]\n  const components = item.components\n    ? item.components\n        .filter(k => Boolean(k))\n        .map(k => String(allItems.itemByKey[k].id))\n    : null\n  return {\n    ...prev,\n    [id]: {\n      ...item,\n      components\n    }\n  }\n}, {} as ItemDataById)\n\nconst transformItemsWithoutComponentsToId = Object.keys(\n  itemsWithoutComponents.itemByKey\n).reduce((prev, key) => {\n  const id = itemsWithoutComponents.itemByKey[key].id\n  const item = itemsWithoutComponents.itemByKey[key]\n  const components = null\n  return {\n    ...prev,\n    [id]: {\n      ...item,\n      components\n    }\n  }\n}, {} as ItemDataById)\n\nfunction getShuffleStock() {\n  const usageMap: Record<string, number> = {}\n\n  for (const id of allItemsById.ids) {\n    usageMap[id] = 0\n  }\n\n  for (const id of allItemsById.ids) {\n    const component = allItemsById.itemsById[id].components\n    if (component !== null) {\n      for (const c of component) {\n        usageMap[c] = usageMap[c] + 1\n      }\n    }\n  }\n\n  return Object.keys(usageMap).reduce(\n    (prev, key) => (usageMap[key] > 0 ? [...prev, key] : prev),\n    [] as string[]\n  )\n}\n\nexport const allItemsById = {\n  ids: Object.keys(transformToIdFromKeys),\n  itemsById: transformToIdFromKeys\n}\nexport const itemsWithComponentsById = {\n  ids: Object.keys(transformItemsWithComponentsToId),\n  itemsById: transformItemsWithComponentsToId\n}\nexport const itemsWithoutComponentsById = {\n  ids: Object.keys(transformItemsWithoutComponentsToId),\n  itemsById: transformItemsWithoutComponentsToId\n}\n\nexport const shuffleStockById = getShuffleStock()\n","import { allItemsById } from './transformODotaConstantsById'\n\nexport const selectItemById = (id: string) => {\n  return allItemsById.itemsById[id]\n}\n","import React, { memo, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport sample from 'lodash/sample'\nimport { Store } from '../../types/Store'\nimport { ENCOURAGEMENT_TEXT } from '../../util/constants'\n\ntype Props = {\n  gameState: Store.App['gameState']\n  nextHandler: () => any\n}\n\nconst StateKeyFrames = keyframes`\n  0% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(-30px);\n    opacity: 0;\n  }\n`\n\nconst State = styled('div')`\n  display: block;\n  font-weight: 700;\n  font-size: 1.5rem;\n  opacity: 0;\n  margin: 0;\n  animation: ${StateKeyFrames} 0.5s linear;\n`\n\nexport const Status = memo(function(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  const { gameState, nextHandler } = props\n  useEffect(() => {\n    if (gameState === 'SUCCESS') {\n      const timeout = setTimeout(() => {\n        clearTimeout(timeout)\n        nextHandler()\n      }, 750)\n    }\n  }, [gameState, nextHandler])\n\n  switch (props.gameState) {\n    case 'SUCCESS':\n      return <State>{sample(ENCOURAGEMENT_TEXT)}</State>\n    case 'FAIL':\n      return <State>Wrong!</State>\n    default:\n      return <State key={'None'}> ‏‏‎ </State>\n  }\n})\n","import React, { memo } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Store } from '../../types/Store'\n\ntype Props = {\n  score: Store.App['score']\n}\n\nconst ScoreKeyFrames = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`\n\nconst ScoreLabel = styled('div')`\n  font-weight: 700;\n  animation: ${ScoreKeyFrames} 0.5s ease;\n  font-size: 1.75rem;\n`\n\nexport const Score = memo(function(\n  props: Props\n): React.FunctionComponentElement<Props> {\n  return <ScoreLabel key={Math.random()}>{props.score}</ScoreLabel>\n})\n","export enum AppActionTypes {\n  TOGGLE_GUESS = 'TOGGLE_GUESS',\n  ADD_GUESS = 'ADD_GUESS',\n  REMOVE_GUESS = 'REMOVE_GUESS',\n  NEXT_QUIZ = 'NEXT_QUIZ',\n  RESTART_GAME = 'RESTART_GAME',\n  SELECT_GAME_MODE = 'SELECT_GAME_MODE',\n  CLEAR_GAME_MODE = 'CLEAR_GAME_MODE',\n  REDUCE_TRIES = 'REDUCE_TRIES'\n}\nexport enum TimerProgressActionTypes {\n  SET_PROGRESS = 'SET_PROGRESS'\n}\n","export interface Action<T extends string> {\n  type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n  payload: P\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P>(\n  type: T,\n  payload: P\n): ActionWithPayload<T, P>\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === undefined ? { type } : { type, payload }\n}\n","import { createAction } from '../../types/ActionHelpers'\nimport { AppActionTypes } from '../../types/ActionTypes'\nimport { Dispatch } from 'redux'\nimport { Store } from '../../types/Store'\n\nexport const toggleGuess = (dispatch: Dispatch) => (guess: string) =>\n  dispatch(createAction(AppActionTypes.TOGGLE_GUESS, guess))\n\nexport const addGuess = (dispatch: Dispatch) => (guess: number) =>\n  dispatch(createAction(AppActionTypes.ADD_GUESS, guess))\n\nexport const removeGuess = (dispatch: Dispatch) => (guess: number) =>\n  dispatch(createAction(AppActionTypes.REMOVE_GUESS, guess))\n\nexport const nextQuiz = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.NEXT_QUIZ))\n\nexport const restartGame = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.RESTART_GAME))\n\nexport const selectGameMode = (dispatch: Dispatch) => (\n  gameMode: Store.App['gameMode']\n) => dispatch(createAction(AppActionTypes.SELECT_GAME_MODE, gameMode))\n\nexport const clearGameMode = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.CLEAR_GAME_MODE))\n\nexport const reduceTries = (dispatch: Dispatch) => () =>\n  dispatch(createAction(AppActionTypes.REDUCE_TRIES))\n","import { createSelector } from 'reselect'\nimport { Store } from '../../types/Store'\n\nconst selectCurrentIndex = (state: Store.All) => state.App.currentIndex\nconst selectItemList = (state: Store.All) => state.App.itemList\nexport const selectCurrentChoices = (state: Store.All) => state.App.choices\n\nexport const selectCurrentItem = createSelector(\n  selectItemList,\n  selectCurrentIndex,\n  (list, i) => list[i]\n)\n\nexport const selectCurrentGuesses = (state: Store.All) => state.App.guesses\n\nexport const selectCurrentGuessState = createSelector(\n  selectCurrentChoices,\n  selectCurrentGuesses,\n  (a, b) => {\n    return b.map(guess => {\n      if (guess === null) {\n        return null\n      } else {\n        return a[guess]\n      }\n    })\n  }\n)\n\nexport const selectCurrentProgress = createSelector(\n  selectItemList,\n  selectCurrentIndex,\n  (list, i) => [i + 1, list.length]\n)\n","import React, { memo } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\ntype Props = {\n  streak: number\n  streakBonus: number\n  currentCount: number\n  totalCount: number\n  triesLeft: number\n}\n\nconst Container = styled('div')`\n  display: flex;\n  padding: 8px;\n  justify-content: space-between;\n`\n\nconst Label = styled('div')`\n  font-weight: 500;\n`\n\nconst TriesKeyFrames = keyframes`\n  from {\n    transform: scale(1.5)\n  }\n  to {\n    transform: scale(1)\n  }\n`\n\nconst TriesShakeKeyFrames = keyframes`\n0% { transform: translate(2px, 1px) rotate(0deg); }\n10% { transform: translate(-1px, -2px) rotate(-1deg); }\n20% { transform: translate(-3px, 0px) rotate(1deg); }\n30% { transform: translate(0px, 2px) rotate(0deg); }\n40% { transform: translate(1px, -1px) rotate(1deg); }\n50% { transform: translate(-1px, 2px) rotate(-1deg); }\n60% { transform: translate(-3px, 1px) rotate(0deg); }\n70% { transform: translate(2px, 1px) rotate(-1deg); }\n80% { transform: translate(-1px, -1px) rotate(1deg); }\n90% { transform: translate(2px, 2px) rotate(0deg); }\n100% { transform: translate(1px, -2px) rotate(-1deg); }\n`\n\nconst TriesLabel = styled(Label)<{ triesLeft: number }>`\n  transform-origin: top left;\n  ${props =>\n    props.triesLeft !== 3 &&\n    props.triesLeft !== 0 &&\n    css`\n      animation: ${TriesKeyFrames} 0.5s cubic-bezier(0.6, -0.28, 0.735, 0.045);\n    `}\n`\n\nconst TriesLabelShake = styled(Label)<{ triesLeft: number }>`\n  transform-origin: center;\n  color: ${props => (props.triesLeft <= 1 ? '#ff1744' : 'inherit')};\n  ${props =>\n    props.triesLeft === 1 &&\n    css`\n      animation: ${TriesShakeKeyFrames} 1s infinite;\n    `}\n`\n\nconst Tries = memo(function({\n  triesLeft\n}: {\n  triesLeft: number\n}): React.FunctionComponentElement<{ triesLeft: number }> {\n  return (\n    <TriesLabel key={Math.random()} triesLeft={triesLeft}>\n      <TriesLabelShake triesLeft={triesLeft}>\n        {triesLeft === 1 ? '1 try' : `${triesLeft} tries`} left\n      </TriesLabelShake>\n    </TriesLabel>\n  )\n})\n\nexport function Header(props: Props): React.FunctionComponentElement<Props> {\n  return (\n    <Container>\n      <Tries triesLeft={props.triesLeft} />\n      <Label>\n        x{props.streak} (+{props.streakBonus})\n      </Label>\n      <Label>\n        {props.currentCount} of {props.totalCount}\n      </Label>\n    </Container>\n  )\n}\n","import { BASE_POINTS } from './constants'\n\nexport const calculateStreakBonus = (streak: number) => {\n  return Math.pow(streak, 2) * 0.01 * BASE_POINTS\n}\n","import React, { useEffect, useState } from 'react'\nimport { TIMER_BASE_TIME_MS } from '../../util/constants'\nimport { Store } from '../../types/Store'\n\nconst TICK_INTERVAL = 100\n\ntype Props = {\n  triesLeft: number\n  gameState: Store.App['gameState']\n  reduceTries: () => any\n  setProgress: (progress: number) => any\n}\n\nexport function Timer(props: Props): React.FunctionComponentElement<Props> {\n  const [prevTries, setPrevTries] = useState<null | number>(null)\n  const [prevGameState, setPrevGameState] = useState<\n    null | Store.App['gameState']\n  >(null)\n  const [countdown, setCountdown] = useState(TIMER_BASE_TIME_MS)\n  if (props.triesLeft !== prevTries) {\n    setPrevTries(props.triesLeft)\n  }\n  if (props.gameState !== prevGameState) {\n    setPrevGameState(props.gameState)\n  }\n  if (\n    props.triesLeft !== prevTries ||\n    (props.gameState === 'WAITING' && prevGameState === 'SUCCESS')\n  ) {\n    setCountdown(TIMER_BASE_TIME_MS)\n  }\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (\n        countdown > 0 &&\n        (prevGameState === 'WAITING' || prevGameState === 'FAIL') &&\n        props.triesLeft > 0\n      ) {\n        setCountdown(countdown - TICK_INTERVAL)\n        props.setProgress(\n          ((countdown - TICK_INTERVAL) / TIMER_BASE_TIME_MS) * 100\n        )\n      }\n      if (countdown <= 0 && props.triesLeft > 0) {\n        props.reduceTries()\n      }\n    }, TICK_INTERVAL)\n    return () => {\n      clearTimeout(timer)\n    }\n  })\n  return null as any\n}\n","import { createAction } from '../../types/ActionHelpers'\nimport { TimerProgressActionTypes } from '../../types/ActionTypes'\nimport { Dispatch } from 'redux'\n\nexport const setProgress = (dispatch: Dispatch) => (progress: number) =>\n  dispatch(createAction(TimerProgressActionTypes.SET_PROGRESS, progress))\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GameOverScreen } from '../GameOverScreen'\nimport Item from '../Item'\nimport { selectItemById } from '../../util/selectItemData'\nimport { Status } from '../Status'\nimport { Score } from '../Score'\nimport { connect } from 'react-redux'\nimport {\n  removeGuess,\n  toggleGuess,\n  restartGame,\n  nextQuiz,\n  addGuess,\n  clearGameMode,\n  reduceTries\n} from '../../store/actions/appActions'\nimport { Dispatch } from 'redux'\nimport {\n  selectCurrentItem,\n  selectCurrentChoices,\n  selectCurrentGuessState,\n  selectCurrentGuesses,\n  selectCurrentProgress\n} from '../../store/selectors/appSelector'\nimport { Store } from '../../types/Store'\nimport { Header } from '../Header'\nimport { calculateStreakBonus } from '../../util/streakBonus'\nimport { Timer } from '../Timer'\nimport { setProgress } from '../../store/actions/progressBarActions'\n\nconst Container = styled('div')`\n  display: flex;\n  justify-content: center;\n  max-width: 100%;\n  flex-wrap: wrap;\n  margin-bottom: 8px;\n  & > div {\n    margin: 8px;\n  }\n`\n\nconst StatusContainer = styled('div')`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 0px;\n`\n\nclass Game extends React.Component<\n  ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n> {\n  nextChoice = () => {\n    this.props.nextQuiz()\n  }\n  restartGame = () => {\n    this.props.restartGame()\n  }\n  clearGameMode = () => {\n    this.props.clearGameMode()\n  }\n  render() {\n    const {\n      currentItem,\n      choices,\n      guesses,\n      guessesIndex,\n      gameState,\n      score,\n      tries,\n      streak,\n      highestStreak,\n      gameMode\n    } = this.props\n    const [current, total] = this.props.currentProgress\n    const streakBonus = calculateStreakBonus(streak)\n    const item = selectItemById(currentItem)\n    return (\n      <div>\n        <Header\n          triesLeft={tries}\n          streak={streak}\n          streakBonus={streakBonus}\n          currentCount={current}\n          totalCount={total}\n        />\n        {(gameState === 'GAME_OVER' || gameState === 'GAME_WON') && (\n          <GameOverScreen\n            score={score}\n            highestStreak={highestStreak}\n            currentCount={current}\n            handleRestart={this.restartGame}\n            handleModeReselect={this.clearGameMode}\n            gameState={gameState}\n            gameMode={gameMode}\n            currentItemElement={\n              <Item\n                img={process.env.REACT_APP_CDN_URL + item.img}\n                name={item.dname}\n              />\n            }\n            answerElement={guesses.map(guess => {\n              if (guess !== null) {\n                const item = selectItemById(guess)\n                return (\n                  <Item\n                    img={process.env.REACT_APP_CDN_URL + item.img}\n                    name={item.dname}\n                  />\n                )\n              } else {\n                return <Item img={''} name={''} />\n              }\n            })}\n          />\n        )}\n        <StatusContainer>\n          <Status gameState={gameState} nextHandler={this.nextChoice} />\n        </StatusContainer>\n        {gameMode === 'TIMED' && (\n          <Timer\n            triesLeft={tries}\n            reduceTries={this.props.reduceTries}\n            gameState={gameState}\n            setProgress={this.props.setProgress}\n          />\n        )}\n        <Container>\n          <Item\n            img={process.env.REACT_APP_CDN_URL + item.img}\n            name={item.dname}\n          />\n        </Container>\n        <Container>\n          {guesses.map((guess, index) => {\n            if (guess !== null) {\n              const item = selectItemById(guess)\n              return (\n                <Item\n                  img={process.env.REACT_APP_CDN_URL + item.img}\n                  name={item.dname}\n                  onClick={() => this.props.removeGuess(index)}\n                  key={`${item.id}-${index}`}\n                />\n              )\n            } else {\n              return <Item img={''} name={''} key={index} />\n            }\n          })}\n        </Container>\n        <Container>\n          {choices.map((choice, index) => {\n            const item = selectItemById(choice)\n            return (\n              <Item\n                img={process.env.REACT_APP_CDN_URL + item.img}\n                name={item.dname}\n                onClick={() => this.props.addGuess(index)}\n                disabled={!!~guessesIndex.indexOf(index)}\n                key={`${item.id}-${index}`}\n              />\n            )\n          })}\n        </Container>\n        <Container>\n          <Score score={score} />\n        </Container>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  toggleGuess: toggleGuess(dispatch),\n  removeGuess: removeGuess(dispatch),\n  addGuess: addGuess(dispatch),\n  nextQuiz: nextQuiz(dispatch),\n  restartGame: restartGame(dispatch),\n  clearGameMode: clearGameMode(dispatch),\n  reduceTries: reduceTries(dispatch),\n  setProgress: setProgress(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  gameState: state.App.gameState,\n  score: state.App.score,\n  tries: state.App.tries,\n  streak: state.App.streak,\n  highestStreak: state.App.highestStreak,\n  gameMode: state.App.gameMode,\n  currentItem: selectCurrentItem(state),\n  choices: selectCurrentChoices(state),\n  guesses: selectCurrentGuessState(state),\n  guessesIndex: selectCurrentGuesses(state),\n  currentProgress: selectCurrentProgress(state)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst BoxWrapper = styled('div')`\n  display: flex;\n  justify-content: center;\n  margin: 16px;\n`\n\nconst BoxInner = styled('div')`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Box = styled('button')`\n  border: 2px solid black;\n  border-radius: 4px;\n  height: 50px;\n  font-size: 1.5rem;\n  margin-bottom: 16px;\n`\n\ntype Props = {\n  selectClassic: () => any\n  selectHardcoreClassic: () => any\n  selectTimed: () => any\n}\n\nclass ModeSelect extends React.Component<Props> {\n  render() {\n    return (\n      <BoxWrapper>\n        <BoxInner>\n          <Box onClick={this.props.selectClassic}>Classic</Box>\n          <Box onClick={this.props.selectHardcoreClassic}>Hardcore Classic</Box>\n          <Box onClick={this.props.selectTimed}>Timed Classic</Box>\n        </BoxInner>\n      </BoxWrapper>\n    )\n  }\n}\n\nexport default ModeSelect\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Game from './components/Game'\nimport ModeSelect from './components/ModeSelect'\nimport { Store } from './types/Store'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { selectGameMode } from './store/actions/appActions'\n\nconst AppContainer = styled('div')`\n  max-width: 600px;\n  margin: 0 auto;\n`\nconst AppDescription = styled('p')`\n  margin: 0;\n  margin-top: 16px;\n`\n\nconst AppDescriptionSuper = styled(AppDescription)`\n  font-weight: 500;\n  font-size: 1.25rem;\n`\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nclass App extends Component<\n  ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>\n> {\n  selectClassic = () => this.props.selectGameMode('CLASSIC')\n  selectHardcoreClassic = () => this.props.selectGameMode('HARDCORE_CLASSIC')\n  selectTimed = () => this.props.selectGameMode('TIMED')\n\n  render() {\n    const { gameMode } = this.props\n    return (\n      <AppContainer>\n        {gameMode === 'NONE' && (\n          <Wrapper>\n            <AppDescriptionSuper>\n              Test your Dota 2 item knowledge\n            </AppDescriptionSuper>\n            <AppDescription>Select a mode to begin</AppDescription>\n            <ModeSelect\n              selectClassic={this.selectClassic}\n              selectHardcoreClassic={this.selectHardcoreClassic}\n              selectTimed={this.selectTimed}\n            />\n          </Wrapper>\n        )}\n        {gameMode !== 'NONE' && <Game />}\n      </AppContainer>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  selectGameMode: selectGameMode(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  gameMode: state.App.gameMode\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import difference from 'lodash/difference'\nimport sampleSize from 'lodash/sampleSize'\nimport shuffle from 'lodash/shuffle'\nimport {\n  itemsWithComponentsById,\n  shuffleStockById\n} from '../../util/transformODotaConstantsById'\n\nexport function generateChoice(item: string, choiceLength: number) {\n  let choiceSize = choiceLength\n  // get the components for the given item\n  const components = itemsWithComponentsById.itemsById[item].components!\n  // check if the choice size is less than the component's length\n  // if it is, then we return the component's length + 1 as default\n  if (choiceSize <= components.length) {\n    choiceSize = components.length + 1\n  }\n  // now we do a set negation on the shuffle stock and the item's component\n  const diff = difference(shuffleStockById, components, [item])\n  // and then we sample the set for (choiceSize - component length) items\n  const choices = sampleSize(diff, choiceSize - components.length)\n\n  return {\n    choices: shuffle([...components, ...choices]) as string[],\n    answer: components as string[]\n  }\n}\n","import produce from 'immer'\nimport shuffle from 'lodash/shuffle'\nimport difference from 'lodash/difference'\nimport { Store } from '../../types/Store'\nimport { ActionWithPayload, Action } from '../../types/ActionHelpers'\nimport { AppActionTypes } from '../../types/ActionTypes'\nimport { generateChoice } from '../game/generateChoice'\nimport { BASE_POINTS } from '../../util/constants'\nimport { calculateStreakBonus } from '../../util/streakBonus'\nimport { itemsWithComponentsById } from '../../util/transformODotaConstantsById'\n\nconst getDefaultState = (): Store.App => {\n  const itemList = shuffle(itemsWithComponentsById.ids)\n  const choiceLength = 8\n  const choice = generateChoice(itemList[0], choiceLength)\n  return {\n    itemList,\n    answer: choice.answer,\n    choices: choice.choices,\n    guesses: choice.answer.map(_ => null),\n    currentIndex: 0,\n    score: 0,\n    choiceLength,\n    gameState: 'WAITING',\n    tries: 3,\n    streak: 0,\n    highestStreak: 0,\n    gameMode: 'NONE'\n  }\n}\n\nconst getGameModeState = (gameMode: Store.App['gameMode']): Store.App => {\n  switch (gameMode) {\n    case 'CLASSIC':\n      return {\n        ...getDefaultState(),\n        gameMode: 'CLASSIC' as Store.App['gameMode']\n      }\n    case 'HARDCORE_CLASSIC':\n      return {\n        ...getDefaultState(),\n        gameMode: 'HARDCORE_CLASSIC' as Store.App['gameMode'],\n        tries: 1\n      }\n    case 'TIMED':\n      return {\n        ...getDefaultState(),\n        gameMode: 'TIMED' as Store.App['gameMode']\n      }\n    default: {\n      return getDefaultState()\n    }\n  }\n}\n\nexport const appReducer = (\n  prevState = getDefaultState(),\n  action: ActionWithPayload<AppActionTypes, any> & Action<any>\n) =>\n  produce(prevState, draft => {\n    switch (action.type) {\n      case AppActionTypes.REDUCE_TRIES: {\n        draft.tries--\n        if (draft.tries === 0) {\n          draft.gameState = 'GAME_OVER'\n          draft.guesses = prevState.answer.map(answer =>\n            prevState.choices.indexOf(answer)\n          )\n        }\n        return\n      }\n      case AppActionTypes.CLEAR_GAME_MODE: {\n        draft.gameMode = 'NONE'\n        return\n      }\n      case AppActionTypes.SELECT_GAME_MODE: {\n        return getGameModeState(action.payload)\n      }\n      case AppActionTypes.RESTART_GAME: {\n        return getGameModeState(prevState.gameMode)\n      }\n      case AppActionTypes.NEXT_QUIZ: {\n        if (\n          prevState.gameState === 'FAIL' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        if (prevState.currentIndex === prevState.itemList.length - 1) {\n          draft.gameState = 'GAME_WON'\n          return\n        }\n        const choice = generateChoice(\n          prevState.itemList[draft.currentIndex + 1],\n          prevState.choiceLength\n        )\n        draft.gameState = 'WAITING'\n        draft.currentIndex = draft.currentIndex + 1\n        draft.choices = choice.choices\n        draft.answer = choice.answer\n        draft.guesses = choice.answer.map(_ => null)\n        return\n      }\n      case AppActionTypes.ADD_GUESS: {\n        if (\n          prevState.gameState === 'SUCCESS' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        const index = prevState.guesses.indexOf(null)\n        if (~index) {\n          draft.guesses[index] = action.payload\n        }\n        // check if the board is full and check if the answer is correct\n        if (!~draft.guesses.indexOf(null) && draft.gameState === 'WAITING') {\n          if (\n            difference(\n              draft.guesses.map(d => draft.choices[d!]),\n              draft.answer\n            ).length === 0\n          ) {\n            draft.gameState = 'SUCCESS'\n            draft.score =\n              draft.score + BASE_POINTS + calculateStreakBonus(prevState.streak)\n            draft.streak = draft.streak + 1\n            if (draft.streak > draft.highestStreak) {\n              draft.highestStreak = draft.streak\n            }\n          } else {\n            draft.tries = draft.tries - 1\n            if (draft.tries === 0) {\n              draft.gameState = 'GAME_OVER'\n              draft.guesses = prevState.answer.map(answer =>\n                prevState.choices.indexOf(answer)\n              )\n            } else {\n              draft.gameState = 'FAIL'\n            }\n            draft.streak = 0\n          }\n        }\n        return\n      }\n      case AppActionTypes.REMOVE_GUESS: {\n        if (\n          prevState.gameState === 'SUCCESS' ||\n          prevState.gameState === 'GAME_OVER'\n        ) {\n          return\n        }\n        const index = action.payload\n        if (prevState.guesses[index] !== null) {\n          draft.guesses[index] = null\n          if (draft.gameState === 'FAIL') {\n            draft.gameState = 'WAITING'\n          }\n        }\n        return\n      }\n      default:\n        return\n    }\n  })\n","import produce from 'immer'\nimport { Store } from '../../types/Store'\nimport { ActionWithPayload, Action } from '../../types/ActionHelpers'\nimport {\n  TimerProgressActionTypes,\n  AppActionTypes\n} from '../../types/ActionTypes'\n\nconst defaultState: Store.TimerProgress = {\n  progress: 100\n}\n\nexport const timerProgressReducer = (\n  prevState = defaultState,\n  action: ActionWithPayload<TimerProgressActionTypes | AppActionTypes, any> &\n    Action<any>\n) =>\n  produce(prevState, draft => {\n    switch (action.type) {\n      case AppActionTypes.SELECT_GAME_MODE:\n      case AppActionTypes.CLEAR_GAME_MODE: {\n        draft.progress = 100\n        return\n      }\n      case TimerProgressActionTypes.SET_PROGRESS: {\n        draft.progress = action.payload\n        return\n      }\n      default:\n        return\n    }\n  })\n","import { combineReducers } from 'redux'\nimport { appReducer } from './App'\nimport { timerProgressReducer } from './TimerProgress'\n\nexport const rootReducer = combineReducers({\n  App: appReducer,\n  TimerProgress: timerProgressReducer\n})\n","import { Middleware } from 'redux'\n;(window as any).__GLOBAL_ACTIONS__ = []\n\nexport const actionLogger: Middleware = store => next => {\n  return action => {\n    ;(window as any).__GLOBAL_ACTIONS__.push([store.getState(), action])\n    return next(action)\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { rootReducer } from './reducers'\nimport { actionLogger } from './middlewares/actionLogger'\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(actionLogger))\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Store } from '../../types/Store'\nimport { connect } from 'react-redux'\nimport { clearGameMode } from '../../store/actions/appActions'\nimport { Dispatch } from 'redux'\n\nconst Wrapper = styled('div')`\n  width: 100%;\n  height: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n`\n\nconst InnerWrapper = styled('div')`\n  display: flex;\n  max-width: 600px;\n  width: 600px;\n  justify-content: space-between;\n`\n\nconst Title = styled('p')`\n  text-transform: uppercase;\n  margin: 0;\n  padding: 0 8px 0 8px;\n  font-weight: 700;\n`\n\nconst TitleButton = styled(Title)`\n  color: #673ab7;\n  user-select: none;\n  cursor: pointer;\n`\n\nconst Meter = styled(`div`)`\n  height: 5px;\n  background: #555;\n  width: 100%;\n  z-index: 1;\n`\n\nconst MeterBar = styled('span')<{ progress: number }>`\n  height: 100%;\n  position: relative;\n  width: ${props => props.progress}%;\n  display: block;\n  overflow: hidden;\n  background-color: #f8bbd0;\n  transition: width 0.1s linear;\n`\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  clearGameMode: clearGameMode(dispatch)\n})\n\nconst mapStateToProps = (state: Store.All) => ({\n  progress: state.TimerProgress.progress,\n  gameMode: state.App.gameMode\n})\n\nexport const SuperHeader = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(function(\n  props: ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>\n): React.FunctionComponentElement<{}> {\n  return (\n    <>\n      <Wrapper>\n        <InnerWrapper>\n          <Title>THE SHOPKEEPER'S QUIZ</Title>\n          {props.gameMode !== 'NONE' && (\n            <TitleButton onClick={props.clearGameMode}>MODE SELECT</TitleButton>\n          )}\n        </InnerWrapper>\n      </Wrapper>\n      <Meter>\n        <MeterBar progress={props.progress} />\n      </Meter>\n    </>\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './store'\nimport { SuperHeader } from './components/SuperHeader'\n\nReactDOM.render(\n  <Provider store={store}>\n    <SuperHeader />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}